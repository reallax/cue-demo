// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/api/core/v1"
)

// CronWorkflow is the definition of a scheduled workflow resource
// +genclient
// +genclient:noStatus
// +kubebuilder:resource:shortName=cwf;cronwf
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#CronWorkflow: {
	metav1.#TypeMeta
	metadata: metav1.#ObjectMeta  @go(ObjectMeta) @protobuf(1,bytes,opt)
	spec:     #CronWorkflowSpec   @go(Spec) @protobuf(2,bytes,opt)
	status?:  #CronWorkflowStatus @go(Status) @protobuf(3,bytes,opt)
}

// CronWorkflowList is list of CronWorkflow resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#CronWorkflowList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta) @protobuf(1,bytes,opt)
	items: [...#CronWorkflow] @go(Items,[]CronWorkflow) @protobuf(2,bytes,rep)
}

#ConcurrencyPolicy: string // #enumConcurrencyPolicy

#enumConcurrencyPolicy:
	#AllowConcurrent |
	#ForbidConcurrent |
	#ReplaceConcurrent

#AllowConcurrent:   #ConcurrencyPolicy & "Allow"
#ForbidConcurrent:  #ConcurrencyPolicy & "Forbid"
#ReplaceConcurrent: #ConcurrencyPolicy & "Replace"

_#annotationKeyLatestSchedule: "cronworkflows.argoproj.io/last-used-schedule"

// CronWorkflowSpec is the specification of a CronWorkflow
#CronWorkflowSpec: {
	// WorkflowSpec is the spec of the workflow to be run
	workflowSpec: #WorkflowSpec @go(WorkflowSpec) @protobuf(1,bytes,opt,casttype=WorkflowSpec)

	// Schedule is a schedule to run the Workflow in Cron format
	schedule: string @go(Schedule) @protobuf(2,bytes,opt)

	// ConcurrencyPolicy is the K8s-style concurrency policy that will be used
	concurrencyPolicy?: #ConcurrencyPolicy @go(ConcurrencyPolicy) @protobuf(3,bytes,opt,casttype=ConcurrencyPolicy)

	// Suspend is a flag that will stop new CronWorkflows from running if set to true
	suspend?: bool @go(Suspend) @protobuf(4,varint,opt)

	// StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its
	// original scheduled time if it is missed.
	startingDeadlineSeconds?: null | int64 @go(StartingDeadlineSeconds,*int64) @protobuf(5,varint,opt)

	// SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time
	successfulJobsHistoryLimit?: null | int32 @go(SuccessfulJobsHistoryLimit,*int32) @protobuf(6,varint,opt)

	// FailedJobsHistoryLimit is the number of failed jobs to be kept at a time
	failedJobsHistoryLimit?: null | int32 @go(FailedJobsHistoryLimit,*int32) @protobuf(7,varint,opt)

	// Timezone is the timezone against which the cron schedule will be calculated, e.g. "Asia/Tokyo". Default is machine's local time.
	timezone?: string @go(Timezone) @protobuf(8,bytes,opt)

	// WorkflowMetadata contains some metadata of the workflow to be run
	workflowMetadata?: null | metav1.#ObjectMeta @go(WorkflowMetadata,*metav1.ObjectMeta) @protobuf(9,bytes,opt,name=workflowMeta)
}

// CronWorkflowStatus is the status of a CronWorkflow
#CronWorkflowStatus: {
	// Active is a list of active workflows stemming from this CronWorkflow
	active: [...v1.#ObjectReference] @go(Active,[]v1.ObjectReference) @protobuf(1,bytes,rep)

	// LastScheduleTime is the last time the CronWorkflow was scheduled
	lastScheduledTime?: null | metav1.#Time @go(LastScheduledTime,*metav1.Time) @protobuf(2,bytes,opt)

	// Conditions is a list of conditions the CronWorkflow may have
	conditions: #Conditions @go(Conditions) @protobuf(3,bytes,rep)
}

// ConditionTypeSubmissionError signifies that there was an error when submitting the CronWorkflow as a Workflow
#ConditionTypeSubmissionError: #ConditionType & "SubmissionError"
