// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1

package v1alpha1

// ArtifactRepository represents an artifact repository in which a controller will store its artifacts
#ArtifactRepository: {
	// ArchiveLogs enables log archiving
	archiveLogs?: null | bool @go(ArchiveLogs,*bool) @protobuf(1,varint,opt)

	// S3 stores artifact in a S3-compliant object store
	s3?: null | #S3ArtifactRepository @go(S3,*S3ArtifactRepository) @protobuf(2,bytes,opt)

	// Artifactory stores artifacts to JFrog Artifactory
	artifactory?: null | #ArtifactoryArtifactRepository @go(Artifactory,*ArtifactoryArtifactRepository) @protobuf(3,bytes,opt)

	// HDFS stores artifacts in HDFS
	hdfs?: null | #HDFSArtifactRepository @go(HDFS,*HDFSArtifactRepository) @protobuf(4,bytes,opt)

	// OSS stores artifact in a OSS-compliant object store
	oss?: null | #OSSArtifactRepository @go(OSS,*OSSArtifactRepository) @protobuf(5,bytes,opt)

	// GCS stores artifact in a GCS object store
	gcs?: null | #GCSArtifactRepository @go(GCS,*GCSArtifactRepository) @protobuf(6,bytes,opt)

	// Azure stores artifact in an Azure Storage account
	azure?: null | #AzureArtifactRepository @go(Azure,*AzureArtifactRepository) @protobuf(7,bytes,opt)
}

#ArtifactRepositoryType: _

// S3ArtifactRepository defines the controller configuration for an S3 artifact repository
#S3ArtifactRepository: {
	#S3Bucket

	// KeyFormat defines the format of how to store keys and can reference workflow variables.
	keyFormat?: string @go(KeyFormat) @protobuf(2,bytes,opt)

	// KeyPrefix is prefix used as part of the bucket key in which the controller will store artifacts.
	// DEPRECATED. Use KeyFormat instead
	keyPrefix?: string @go(KeyPrefix) @protobuf(3,bytes,opt)
}

// OSSArtifactRepository defines the controller configuration for an OSS artifact repository
#OSSArtifactRepository: {
	#OSSBucket

	// KeyFormat defines the format of how to store keys and can reference workflow variables.
	keyFormat?: string @go(KeyFormat) @protobuf(2,bytes,opt)
}

// GCSArtifactRepository defines the controller configuration for a GCS artifact repository
#GCSArtifactRepository: {
	#GCSBucket

	// KeyFormat defines the format of how to store keys and can reference workflow variables.
	keyFormat?: string @go(KeyFormat) @protobuf(2,bytes,opt)
}

// ArtifactoryArtifactRepository defines the controller configuration for an artifactory artifact repository
#ArtifactoryArtifactRepository: {
	#ArtifactoryAuth

	// RepoURL is the url for artifactory repo.
	repoURL?: string @go(RepoURL) @protobuf(2,bytes,opt)

	// KeyFormat defines the format of how to store keys and can reference workflow variables.
	keyFormat?: string @go(KeyFormat) @protobuf(3,bytes,opt)
}

// AzureArtifactRepository defines the controller configuration for an Azure Blob Storage artifact repository
#AzureArtifactRepository: {
	#AzureBlobContainer

	// BlobNameFormat is defines the format of how to store blob names. Can reference workflow variables
	blobNameFormat?: string @go(BlobNameFormat) @protobuf(2,bytes,opt)
}

// HDFSArtifactRepository defines the controller configuration for an HDFS artifact repository
#HDFSArtifactRepository: {
	#HDFSConfig

	// PathFormat is defines the format of path to store a file. Can reference workflow variables
	pathFormat?: string @go(PathFormat) @protobuf(2,bytes,opt)

	// Force copies a file forcibly even if it exists
	force?: bool @go(Force) @protobuf(3,varint,opt)
}
